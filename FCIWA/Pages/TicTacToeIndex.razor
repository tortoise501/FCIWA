@page "/TicTacToe"
<div class="grid-container">
  @foreach (IGameCell cell in (SuperGrid as IGameGrid).Cells)
  {
    <SmallGameComponent SmallGrid="@(cell as SmallGame)" OnPlayerWinning="ReloadOnWinning" SmallGameIndex="@i" />
    i++;
    @* <p>ok</p> *@
  }
  @if (i != 0)
  {
    i = 0;
  }
</div>
<style>
  .grid-container {
    --length: min(calc(90vh), calc(90vw));
    width: var(--length);
    height: var(--length);
    display: grid;
    grid-template-columns: auto auto auto;
    background-color: black;
    gap: 3%;
    user-select: none;
  }

  .inner-grid-container {
    background-color: black;
    gap: 3%;
    width: 100%;
    height: 100%;
  }

  .grid-item {
    background-color: white;
    text-align: center;
    width: 100%;
    height: 100%;
  }

  .cellImg {
    width: 75%;
    margin: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }

  .imgDiv {
    background-color: white;
    justify-content: center;
    position: relative;
  }
</style>

@code {
  int i = 0;
  SuperGameGrid SuperGrid;
  Cell WonBy = Cell.None;
  protected override void OnInitialized()
  {
    Console.WriteLine("test");
    SmallGame[] smallGames = new SmallGame[9];
    for (int i = 0; i < smallGames.Length; i++)
    {
      GameCell[] cells = new GameCell[9];
      for (int j = 0; j < smallGames.Length; j++)
      {
        cells[j] = new GameCell();
      }
      smallGames[i] = new SmallGame(cells);
    }
    SuperGrid = new SuperGameGrid(smallGames);
  }
  public void ReloadOnWinning()
  {
    Cell Winner = (SuperGrid as IGameGrid).ValidateGrid();
    Console.WriteLine($"validating");
    if (Winner != Cell.None)
    {
      Console.WriteLine($"{Winner} won");
    }
  }
}