@page "/TicTacToe"
<div class="horizontal-center-container">
  <div class="horizontal-center-item">
    @if (WonBy != Cell.None)
    {
      switch (WonBy)
      {
        case Cell.X:
          {
            <div class="gameOverScreen">
              <p class="gameOverText XText">Game Over X won</p>
            </div>
            break;
          }
        case Cell.O:
          {
            <div class="gameOverScreen">
              <p class="gameOverText OText">Game Over O won</p>
            </div>
            break;
          }
        case Cell.Tie:
          {
            <div class="gameOverScreen TieText">
              <p class="gameOverText">Game Over Tie</p>
            </div>
            break;
          }
      }
    }
    <div class="grid-container">
      @foreach (IGameCell cell in (SuperGrid as IGameGrid).Cells)
      {
        <SmallGameComponent SmallGrid="@(cell as SmallGame)" OnPlayerWinning="ReloadOnWinning" SmallGameIndex="@i"
          OnClick="StateHasChanged" />
        i++;
      }
      @if (i != 0)
      {
        i = 0;
      }
    </div>
  </div>
</div>
<style>
  .selectedSmallGame {
    background-color: rgb(0, 148, 222) !important;
  }

  .gameOverScreen {
    position: absolute;
    width: var(--length);
    height: var(--length);
    background-color: rgba(255, 255, 255, 0.388);
    margin: auto;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  @*.gameOverText{font-family:monospace;text-shadow:2px2pxblack;z-index:1;font-size:var(--font-size);}*@.XText {
    color: blue;
  }

  .OText {
    color: red;
  }

  .TieText {
    color: black;
  }

  :root {
    --length: min(calc(90vh), calc(90vw));
    --font-size: calc(var(--length)/9);
  }

  .grid-container {
    width: var(--length);
    height: var(--length);
    display: grid;
    grid-template-columns: auto auto auto;
    background-color: black;
    gap: 3%;
    user-select: none;
  }

  .inner-grid-container {
    background-color: black;
    gap: 3%;
    width: 100%;
    height: 100%;
  }

  .grid-item {
    background-color: white;
    text-align: center;
    width: 100%;
    height: 100%;
  }

  .cellImg {
    width: 75%;
    margin: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }

  .imgDiv {
    background-color: white;
    justify-content: center;
    position: relative;
  }
</style>

@code {
  int i = 0;
  SuperGameGrid SuperGrid;
  Cell WonBy = Cell.None;
  protected override void OnInitialized()
  {
    Console.WriteLine("test");
    SmallGame[] smallGames = new SmallGame[9];
    for (int i = 0; i < smallGames.Length; i++)
    {
      GameCell[] cells = new GameCell[9];
      for (int j = 0; j < smallGames.Length; j++)
      {
        cells[j] = new GameCell();
      }
      smallGames[i] = new SmallGame(cells);
    }
    SuperGrid = new SuperGameGrid(smallGames);
  }
  public void ReloadOnWinning()
  {
    Cell Winner = (SuperGrid as IGameGrid).ValidateGrid();
    Console.WriteLine($"validating");
    if (Winner != Cell.None)
    {
      WonBy = Winner;
      StateHasChanged();
      Console.WriteLine($"{Winner} won");
    }
  }
}