<div class="gameRoot">
  <div class="game">
    @if (isGameFinished)
    {
      <div class="gameOverScreen">
        <p class="gameOverTerminalText gameOverText">Game Over, You @(Game.gameState == GameState.Won ? "won" : "lost")
        </p>
      </div>
    }
    <AttemptsComponent attempts="@attempts" />
    <div class="inlineDiv defaultTerminalText">
      @for (int i = 0; i < columns.Length; i++)
      {
        <AddressesComponent />
        <ColumnComponent Game="@Game" thisColumn="@columns[i]" RefreshGame="RefreshGame"
          ChangedSelectedElement="RefreshLogger" />
      }
      <LoggerComponent logger="@logger" @ref="loggerComponent" />
    </div>
  </div>
</div>

<style>
  .defaultTerminalText {
    font-family: monospace;
    background-color: black;
    color: green;
    user-select: none;
  }

  .hoveredElement {
    background-color: green;
    color: black;
  }

  .unhoveredElement {
    background-color: black;
    color: green;
  }

  .gameOverScreen {
    position: absolute;
    width: var(--screen-width);
    height: var(--screen-height);
    background-color: rgba(255, 255, 255, 0.388);
    margin: auto;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .gameOverTerminalText {
    font-size: calc(var(--font-size) * 2.5);
    color: green;
    font-family: monospace;
  }

  .gameRoot {
    --box-width: 90vw;
    --box-height: 90vh;
    width: var(--box-width);
    height: var(--box-height);
    /*idk what it is but ok*/
    /*ratio of character width and height (height = width * 1.65)*/
  @*--font-ratio:calc(1.8);*@
    /*screen ratio (columns/rows)*/
    --screen-width-height-ratio: @screenWidthHeightRatio;


    /*width for max height*/
    --screen-height-related-width: calc(var(--box-height) * var(--screen-width-height-ratio) / @fontRatio);
    /*width for max width*/
    --screen-width-related-width: var(--box-width);


    /*screen width = 90% of screen or, to compensate for overflow, width for 90% of height accounting for character height*/
    --screen-width: min(var(--screen-width-related-width), var(--screen-height-related-width));
    /* screen height according to screen ratio*/
    --screen-height: calc(var(--screen-width)/var(--screen-width-height-ratio) * @fontRatio);

    --character-width: calc(var(--screen-width)/@width);
    /*---------------PROBLEMATIC-----------*/
    --character-height: calc(var(--screen-height)/@height);
    --padding: var(--character-width);
    --font-size: var(--character-height);
  @*Testing*@font-size: var(--font-size);
  }

  @*:root{/*idkwhatitisbutok*//*ratioofcharacterwidhtandheight(height=widht*1.65)*/--font-ratio:calc(1.8);/*screenratio(columns/rows)*/--screen-width-height-ratio:@screenWidthHeightRatio;/*screenwidth=90%ofscreenor,tocompensateforoverflow,widhtfor90%ofheightaccountingforcharacterheigth*/--screen-width:min(var(--box-width),calc(var(--box-heigth)*var(--screen-width-height-ratio)/var(--font-ratio)));/*screenhaightaccordingtoscreenratio*/--screen-height:calc(calc(var(--screen-width)/var(--screen-width-height-ratio))*var(--font-ratio));--character-width:calc(var(--screen-width)/@width);--character-height:calc(var(--screen-height)/@height);--padding:var(--character-width);--font-size:var(--character-height);}*@.game {
    background-color: black;
    outline-color: green;
    outline-style: solid;
    outline-width: 4px;
    margin: auto;
    font-size: var(--font-size);
    width: var(--screen-width);
    height: var(--screen-height);
    padding: 10px;
  }

  .defaultTerminalDiv {
    line-height: @lineHeight;
    margin-right: var(--padding);
  }
</style>
@code {
  const int symbolsNumber = columnAmount * (columnWidth + 1 + addressWidth + 1) + loggerWidth;
  const int width = symbolsNumber;
  const int commonHeight = 16;
  const float lineHeight = 0.1f;
  const float height = (commonHeight + 2) * (lineHeight + 1f);
  const float fontRatio = 1.8f;
  const float screenWidthHeightRatio = width / height;
  //attempt
  const int maxAttempts = 4;
  //column
  const int columnAmount = 2;
  const int columnWidth = 12;
  const int columnHeight = commonHeight;
  const int wordLength = 6;
  const int wordAmount = 8;
  const int hintAmount = 4;
  //addresses
  const int addressWidth = 6;
  const int addressHeight = commonHeight;
  //logger
  const int loggerWidth = 20;
  public GameData Game = new GameData();
  protected override void OnInitialized()
  {
    @* Console.WriteLine("My debug output."); *@
    string[] RandomWordArray = Constants.GenerateRandomWords(wordAmount * columnAmount, wordLength);
    Console.WriteLine($"word count = {RandomWordArray.Length}.");
    string correctWord = RandomWordArray[Constants.rnd.Next(0, RandomWordArray.Length)];
    Console.WriteLine($"Correct Word {correctWord}");
    Game.correctWord = correctWord;
    List<string[]> words = new List<string[]>();
    for (int i = 0; i < columnAmount; i++)
    {
      words.Add(new string[0]);
      words[i] = RandomWordArray.Skip(i * wordAmount).Take(wordAmount).ToArray();
    }
    for (int i = 0; i < columns.Length; i++)
    {
      columns[i] = new Column(i, columnWidth, columnHeight, wordLength, wordAmount, words[i], hintAmount, 1);
    }
    Game.columns = columns;
    Game.attempts = attempts;
    Game.logger = logger;
  }
  public void RefreshGame()
  {
    Console.WriteLine("Refreshing the game");
    Console.WriteLine(Game.cashedElement);
    Console.WriteLine(Game.cashedExecutionCode);
    Console.WriteLine(attempts.attemptsLeft);
    if (Game.gameState != GameState.InProgress)
    {
      FinnishGame();
    }
    StateHasChanged();
  }
  bool isGameFinished = false;
  public async void FinnishGame()
  {
    Console.WriteLine("Not Yet Implemented FinnishGame()");
    await Task.Delay(2000);
    isGameFinished = true;
    StateHasChanged();
  }

  Column[] columns = new Column[columnAmount];
  Attempts attempts = new Attempts(maxAttempts);
  GameLogger logger = new GameLogger(16);
  public void RefreshLogger()
  {
    loggerComponent.RefreshLogger();
  }
  public LoggerComponent loggerComponent;
}