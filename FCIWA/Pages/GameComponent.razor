<div class="game">
  <AttemptsComoponent />
  <div class="inlineDiv defaultTerminalText">
    @for (int i = 0; i < columns.Length; i++)
    {
      <AddressesComoponent />
      <ColumnComponent thisColumn="@columns[i]" />
    }
    <LoggerComponent />
  </div>
</div>

<style>
  :root {

    /*idk what it is but ok*/


    /*ratio of character widht and height (height = widht * 1.65)*/
    --font-ratio: calc(1.65);
    /*screen ratio (columns/rows)*/
    --screen-width-height-ratio: @screenWidthHeightRatio;
    /*screen width = 90% of screen or, to compensate for overflow, widht for 90% of height accounting for character heigth*/
    --screen-width: min(90vw, calc(90vh * var(--screen-width-height-ratio) / var(--font-ratio)));
    /* screen haight according to screen ratio*/
    --screen-height: calc(calc(var(--screen-width)/var(--screen-width-height-ratio)) * var(--font-ratio));

    --character-width: calc(var(--screen-width)/@width);
    --character-height: calc(var(--screen-height)/@height);
    --padding: var(--character-width);
    --font-size: var(--character-height);
  }

  .game {
    background-color: black;
    outline-color: green;
    outline-style: solid;
    outline-width: 10px;
    margin: auto;
    font-size: var(--font-size);
    width: var(--screen-width);
    height: var(--screen-height);
  }

  .defaultTerminalDiv {
    line-height: @lineHeight;
    margin-right: var(--padding);
  }
</style>
@code {
  const int symbolsNumber = columnAmount * (columnWidth + 1 + addressWidth + 1) + loggerWidth;
  const int width = symbolsNumber;
  const int commonHeight = 16;
  const float lineHeight = 0.1f;
  const float height = (commonHeight + 2) * (lineHeight + 1f);
  const float screenWidthHeightRatio = width / height;
  //attempt
  const int maxAttempts = 4;
  //column
  const int columnAmount = 3;
  const int columnWidth = 12;
  const int columnHeight = commonHeight;
  const int wordLength = 6;
  const int wordAmount = 8;
  const int hintAmount = 4;
  //addresses
  const int addressWidth = 6;
  const int addressHeight = commonHeight;
  //logger
  const int loggerWidth = 15;
  protected override void OnInitialized()
  {
    for (int i = 0; i < columns.Length; i++)
    {
      columns[i] = new Column(columnWidth, columnHeight, wordLength, wordAmount, Constants.GenerateRandomWords(wordAmount,
      wordLength), hintAmount, 1);
    }
  }

  Column[] columns = new Column[columnAmount];
  Attempts attempts = new Attempts(maxAttempts);
}